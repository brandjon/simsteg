# stegmain.py: Main file for running steganography.


# TO USE: Place two bitmap images of equal dimension in the steg/
#         directory, named "carrier.bmp" and "secret.bmp". Uncomment
#         the do_hide code and run this program to create a third image
#         "innocuous.bmp" that hides the secret in the carrier. Then
#         comment out the do_hide and uncomment the do_unhide to
#         reproduce the secret (in poor quality) from the combined
#         image, under the name "sneaky.bmp".
#
#         The last parameter to do_hide and do_unhide must match. It
#         controls the number of bits to take away from the carrier
#         for use by the secret image. Valid values are 0-8. The higher
#         it is, the higher quality the reproduced secret will be and
#         the more the secret will "leak through" the carrier.


from steg import do_hide, do_unhide, xor
from shader import apply_shader2, make_shader2
from core import load_image_data, save_image_data


prefix = '../steg/'
k = 3


# Uncomment to produce combined image.
# do_hide(prefix + 'carrier.bmp',
#         prefix + 'secret.bmp',
#         prefix + 'innocuous.bmp',
#         k)

# Uncomment to extract original secret.
# do_unhide(prefix + 'innocuous.bmp',
#           prefix + 'sneaky.bmp',
#           k)



# This alternative demo hides one secret inside another inside a
# carrier. The inner secret suffers a more severe loss of quality
# than the outer secret. Both the outer secret and carrier show
# visible leakage of the contained image.
#
# To use, name the inputs "carrier.bmp", "secret1.bmp", and
# "secret2.bmp". The files generated by do_hide are the intermediate
# file "bothsecrets.bmp" and completed message "innocuous.bmp". The
# files extracted by do_unhide are "sneaky.bmp" (matching "secret1.bmp"
# with quality loss) and "extrasneaky.bmp" (matching secret2.bmp with
# severe quality loss).

prefix = '../steg/double secret/'

# Uncomment to produce a double-nested combined image.
# do_hide(prefix + 'secret1.bmp',
#         prefix + 'secret2.bmp',
#         prefix + 'bothsecrets.bmp',
#         5)
# 
# do_hide(prefix + 'carrier.bmp',
#         prefix + 'bothsecrets.bmp',
#         prefix + 'innocuous.bmp',
#         5)

# Uncomment to extract the double-nested secret.
# do_unhide(prefix + 'innocuous.bmp',
#           prefix + 'sneaky.bmp',
#           5)
# 
# do_unhide(prefix + 'sneaky.bmp',
#           prefix + 'extrasneaky.bmp',
#           5)


# prefix = '../steg/xor/'
# 
# secret = load_image_data(prefix + 'secret.bmp')
# key = load_image_data(prefix + 'key.bmp')
# print('Processing...')
# apply_shader2(secret, key, xor)
# save_image_data(prefix + 'encrypted.bmp', secret)
#  
# encrypted = load_image_data(prefix + 'encrypted.bmp')
# key = load_image_data(prefix + 'key.bmp')
# print('Processing...')
# apply_shader2(encrypted, key, xor)
# save_image_data(prefix + 'decrypted.bmp', encrypted)


# prefix = '../steg/'
# 
# def int_blend(v1, v2):
#     return int(v1 * .20) + int(v2 * .80)
# blend = make_shader2(int_blend)
# 
# im1 = load_image_data(prefix + 'carrier.bmp')
# im2 = load_image_data(prefix + 'secret.bmp')
# apply_shader2(im1, im2, blend)
# save_image_data(prefix + 'blended.bmp', im1)

print 'Done'
